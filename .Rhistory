trainDat_clustered <- trainDat_clustered[complete.cases(trainDat_clustered),]
# biased with outlier
trainDat_biasedWithOutlier <- extract(predictors, samplepoints_biasedWithOutlier, df=TRUE)
trainDat_biasedWithOutlier$response <- extract(response, samplepoints_biasedWithOutlier, ID = FALSE)$response
trainDat_biasedWithOutlier <- trainDat_biasedWithOutlier[complete.cases(trainDat_biasedWithOutlier),]
set.seed(seed)
# random
knndm_folds_random <- knndm(samplepoints_random, modeldomain = modeldomain, k = 10)
samplepoints_random$fold = knndm_folds_random$clusters
plot_sample_cv_design_random = ggplot() +
geom_spatvector(data = modeldomain_vect, fill = "white") +
labs(title = "CV design (random)") +
geom_sf(mapping = aes(col = factor(fold)), data = samplepoints_random, size = 1) +
scale_color_manual(name = "knndm folds", values = c('#a50026','#d73027','#f46d43','#fdae61','#fee090','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695')) +
theme +
theme(legend.position.inside=c(.8,.16),
legend.text=element_text(size = 8),
legend.title=element_text(size = 10),
legend.background=element_blank(),
legend.key.height = unit(0.03, "npc"),
legend.key.width = unit(0.015, "npc"))
# clustered
knndm_folds_clustered <- knndm(samplepoints_clustered, modeldomain = modeldomain, k = 10)
samplepoints_clustered$fold = knndm_folds_clustered$clusters
plot_sample_cv_design_clustered = ggplot() +
geom_spatvector(data = modeldomain_vect, fill = "white") +
labs(title = "CV design (clustered)") +
geom_sf(mapping = aes(col = factor(fold)), data = samplepoints_clustered, size = 1) +
scale_color_manual(name = "knndm folds", values = c('#a50026','#d73027','#f46d43','#fdae61','#fee090','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695')) +
theme +
theme(legend.position.inside=c(.8,.16),
legend.text=element_text(size = 8),
legend.title=element_text(size = 10),
legend.background=element_blank(),
legend.key.height = unit(0.03, "npc"),
legend.key.width = unit(0.015, "npc"))
# biased with outlier
knndm_folds_biasedWithOutlier <- knndm(samplepoints_biasedWithOutlier, modeldomain = modeldomain, k = 10)
samplepoints_biasedWithOutlier$fold = knndm_folds_biasedWithOutlier$clusters
plot_sample_cv_design_biasedWithOutlier = ggplot() +
geom_spatvector(data = modeldomain_vect, fill = "white") +
labs(title = "CV design (biased with outliers)") +
geom_sf(mapping = aes(col = factor(fold)), data = samplepoints_biasedWithOutlier, size = 1) +
scale_color_manual(name = "knndm folds", values = c('#a50026','#d73027','#f46d43','#fdae61','#fee090','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695')) +
theme +
theme(legend.position.inside=c(.8,.16),
legend.text=element_text(size = 8),
legend.title=element_text(size = 10),
legend.background=element_blank(),
legend.key.height = unit(0.03, "npc"),
legend.key.width = unit(0.015, "npc"))
pdf(file = "code/figures/simulation_study/sample_designs_knndm_folds.pdf", width = 15, height = 5)
plot_grid(plot_sample_cv_design_random, plot_sample_cv_design_clustered, plot_sample_cv_design_biasedWithOutlier, labels = c("(a)", "(b)", "(c)"), ncol = 3)
invisible(dev.off())
set.seed(seed)
# random with 10-fold random CV
model_random <- train(
trainDat_random[, names(predictors)],
trainDat_random$response,
method = "rf",
importance = TRUE,
tuneGrid = expand.grid(mtry = c(2:length(names(
predictors
)))),
trControl = trainControl(
method = "cv",
index = knndm_folds_random$indx_train,
savePredictions = TRUE
)
)
# clustered with spatial leave one cluster out CV
model_clustered <- train(
trainDat_clustered[, names(predictors)],
trainDat_clustered$response,
method = "rf",
importance = TRUE,
tuneGrid = expand.grid(mtry = c(2:length(names(
predictors
)))),
trControl = trainControl(
method = "cv",
index = knndm_folds_clustered$indx_train,
savePredictions = TRUE
)
)
# biased with outlier with 10-fold NNDM CV
model_biasedWithOutlier <-
train(
trainDat_biasedWithOutlier[, names(predictors)],
trainDat_biasedWithOutlier$response,
method = "rf",
importance = TRUE,
tuneGrid = expand.grid(mtry = c(2:length(names(
predictors
)))),
trControl = trainControl(
method = "cv",
index = knndm_folds_biasedWithOutlier$indx_train,
savePredictions = TRUE
)
)
# arrange CV results
cv_results = rbind(global_validation(model_random),
global_validation(model_clustered),
global_validation(model_biasedWithOutlier)) |>
as.data.frame() |> mutate("CV" = c("10-fold random CV", "10-fold LOCO CV", "10-fold NNDM CV"),
"predictors" = c(ncol(model_random$trainingData)-1,
ncol(model_clustered$trainingData)-1,
ncol(model_biasedWithOutlier$trainingData)-1))
# print CV results
knitr::kable(cv_results)
# print variable importances
plot1 = plot(varImp(model_random,scale = F), col="black")
plot2 = plot(varImp(model_clustered,scale = F), col="black")
plot3 = plot(varImp(model_biasedWithOutlier,scale = F), col="black")
pdf(file = "code/figures/simulation_study/varImps.pdf", width = 14, height = 6)
plot_grid(plot1, plot2, plot3, ncol = 3, nrow = 1, labels = c("(a)", "(b)", "(c)"))
invisible(dev.off())
# random
prediction_random <- predict(predictors, model_random, na.rm = T)
truediff_random <- abs(prediction_random-response)
names(truediff_random) <- "absError"
# clustered
prediction_clustered <- predict(predictors, model_clustered, na.rm = T)
truediff_clustered <- abs(prediction_clustered-response)
names(truediff_clustered) <- "absError"
# biased with outlier
prediction_biasedWithOutlier <- predict(predictors, model_biasedWithOutlier, na.rm = T)
truediff_biasedWithOutlier <- abs(prediction_biasedWithOutlier-response)
names(truediff_biasedWithOutlier) <- "absError"
# random
AOA_random <- aoa(newdata = predictors, model = model_random, method = "L2", LPD = TRUE, maxLPD = 1)
# clustered
AOA_clustered <- aoa(newdata = predictors, model = model_clustered, method = "L2", LPD = TRUE, maxLPD = 1)
# biased with outlier
AOA_biasedWithOutlier <- aoa(newdata = predictors, model = model_biasedWithOutlier, method = "L2", LPD = TRUE, maxLPD = 1)
# RF sd helper function
RFsd <- function(predictors,model){
prep <- as.data.frame(predictors)
prep[is.na(prep)] <- -9999
pred_all <- predict(model$finalModel,prep,predict.all=TRUE)
sds <-  apply(pred_all$individual,1,sd)
predsd <- predictors[[1]]
predsd[!is.na(predsd)] <- sds
names(predsd) <- "sd"
return(predsd)
}
# random
predsd_random <- RFsd(predictors,model_random)
# clustered
predsd_clustered <- RFsd(predictors,model_clustered)
# biased with outlier
predsd_biasedWithOutlier <- RFsd(predictors,model_biasedWithOutlier)
#######################
## LPD ~ RMSE tables ##
#######################
# random
LPD_RMSE_random <- data.frame()
for (i in seq(0, AOA_random$parameters$maxLPD)) {
RMSE = rmse(values(prediction_random)[values(AOA_random$LPD)==i],
values(response)[values(AOA_random$LPD)==i])
new_row <- data.frame(LPD = i, RMSE = RMSE)
LPD_RMSE_random <- rbind(LPD_RMSE_random, new_row)
}
# clustered
LPD_RMSE_clustered <- data.frame()
for (i in seq(0, AOA_clustered$parameters$maxLPD)) {
RMSE = rmse(values(prediction_clustered)[values(AOA_clustered$LPD)==i],
values(response)[values(AOA_clustered$LPD)==i])
new_row <- data.frame(LPD = i, RMSE = RMSE)
LPD_RMSE_clustered <- rbind(LPD_RMSE_clustered, new_row)
}
# biased with outlier
LPD_RMSE_biasedWithOutlier <- data.frame()
for (i in seq(0, AOA_biasedWithOutlier$parameters$maxLPD)) {
RMSE = rmse(values(prediction_biasedWithOutlier)[values(AOA_biasedWithOutlier$LPD)==i],
values(response)[values(AOA_biasedWithOutlier$LPD)==i])
new_row <- data.frame(LPD = i, RMSE = RMSE)
LPD_RMSE_biasedWithOutlier <- rbind(LPD_RMSE_biasedWithOutlier, new_row)
}
## RMSE inside and outside AOA
# random
rmse(values(prediction_random)[values(AOA_random$LPD)==0],
values(response)[values(AOA_random$LPD)==0])
rmse(values(prediction_random)[values(AOA_random$LPD)>0],
values(response)[values(AOA_random$LPD)>0])
# clustered
rmse(values(prediction_clustered)[values(AOA_clustered$LPD)==0],
values(response)[values(AOA_clustered$LPD)==0])
rmse(values(prediction_clustered)[values(AOA_clustered$LPD)>0],
values(response)[values(AOA_clustered$LPD)>0])
# biased with outlier
rmse(values(prediction_biasedWithOutlier)[values(AOA_biasedWithOutlier$LPD)==0],
values(response)[values(AOA_biasedWithOutlier$LPD)==0])
rmse(values(prediction_biasedWithOutlier)[values(AOA_biasedWithOutlier$LPD)>0],
values(response)[values(AOA_biasedWithOutlier$LPD)>0])
max_ln <- max(c(length(LPD_RMSE_random$LPD), length(LPD_RMSE_clustered$LPD), length(LPD_RMSE_biasedWithOutlier$LPD)))
# generate table for latex
LPD_RMSE_complete = data.frame(
LPD_random = c(LPD_RMSE_random$LPD, rep(NA, max_ln - length(
LPD_RMSE_random$LPD
))),
RMSE_random = c(LPD_RMSE_random$RMSE, rep(NA, max_ln - length(
LPD_RMSE_random$RMSE
))),
LPD_clustered = c(LPD_RMSE_clustered$LPD, rep(
NA, max_ln - length(LPD_RMSE_clustered$LPD)
)),
RMSE_clustered = c(LPD_RMSE_clustered$RMSE, rep(
NA, max_ln - length(LPD_RMSE_clustered$RMSE)
)),
LPD_biasedWithOutlier = c(LPD_RMSE_biasedWithOutlier$LPD, rep(
NA, max_ln - length(LPD_RMSE_biasedWithOutlier$LPD)
)),
RMSE_biasedWithOutlier = c(LPD_RMSE_biasedWithOutlier$RMSE, rep(
NA, max_ln - length(LPD_RMSE_biasedWithOutlier$RMSE)
))
)
print(xtable(LPD_RMSE_complete), include.rownames=FALSE)
###############################
## LPD ~ Mean Pred SD tables ##
###############################
# random
LPD_predsd_random <- data.frame()
for (i in seq(0, AOA_random$parameters$maxLPD)) {
meanPredSd = mean(values(predsd_random)[values(AOA_random$LPD)==i], na.rm = T)
new_row <- data.frame(LPD = i, meanPredSd = meanPredSd)
LPD_predsd_random <- rbind(LPD_predsd_random, new_row)
}
# clustered
LPD_predsd_clustered <- data.frame()
for (i in seq(0, AOA_clustered$parameters$maxLPD)) {
meanPredSd = mean(values(predsd_clustered)[values(AOA_clustered$LPD)==i], na.rm = T)
new_row <- data.frame(LPD = i, meanPredSd = meanPredSd)
LPD_predsd_clustered <- rbind(LPD_predsd_clustered, new_row)
}
# biased with outlier
LPD_predsd_biasedWithOutlier <- data.frame()
for (i in seq(0, AOA_biasedWithOutlier$parameters$maxLPD)) {
meanPredSd = mean(values(predsd_biasedWithOutlier)[values(AOA_biasedWithOutlier$LPD)==i], na.rm = T)
new_row <- data.frame(LPD = i, meanPredSd = meanPredSd)
LPD_predsd_biasedWithOutlier <- rbind(LPD_predsd_biasedWithOutlier, new_row)
}
max_ln <- max(c(length(LPD_predsd_random$LPD), length(LPD_predsd_clustered$LPD), length(LPD_predsd_biasedWithOutlier$LPD)))
# generate table for latex
LPD_predsd_complete = data.frame(
LPD_random = c(LPD_predsd_random$LPD, rep(NA, max_ln - length(
LPD_predsd_random$LPD
))),
meanPredSd_random = c(LPD_predsd_random$meanPredSd, rep(NA, max_ln - length(
LPD_predsd_random$meanPredSd
))),
LPD_clustered = c(LPD_predsd_clustered$LPD, rep(
NA, max_ln - length(LPD_predsd_clustered$LPD)
)),
meanPredSd_clustered = c(LPD_predsd_clustered$meanPredSd, rep(
NA, max_ln - length(LPD_predsd_clustered$meanPredSd)
)),
LPD_biasedWithOutlier = c(LPD_predsd_biasedWithOutlier$LPD, rep(
NA, max_ln - length(LPD_predsd_biasedWithOutlier$LPD)
)),
meanPredSd_biasedWithOutlier = c(LPD_predsd_biasedWithOutlier$meanPredSd, rep(
NA, max_ln - length(LPD_predsd_biasedWithOutlier$meanPredSd)
))
)
print(xtable(LPD_predsd_complete), include.rownames=FALSE)
# random
dat_all_random <- data.frame(absError = values(truediff_random, na.rm=T), type = rep("LPD",length(values(AOA_random$LPD, na.rm = T))),
LPD = values(AOA_random$LPD, na.rm = T), DI = values(AOA_random$DI, na.rm = T), predsd = values(predsd_random, na.rm = T))
th_random <- cv_results$RMSE[1]
plot1_random = ggplot(dat_all_random, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_random$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_random$absError)), 0.01))) +
ylab("True absolute error / RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_random, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_random,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ true abs. error (random)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_random = ggplot(dat_all_random, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_random$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_random$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_random, aes(LPD, meanPredSd, color = "Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (random)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# clustered
dat_all_clustered <- data.frame(absError = values(truediff_clustered, na.rm=T), type = rep("LPD",length(values(AOA_clustered$LPD, na.rm = T))),
LPD = values(AOA_clustered$LPD, na.rm = T), DI = values(AOA_clustered$DI, na.rm = T), predsd = values(predsd_clustered, na.rm = T))
th_clustered <- cv_results$RMSE[2]
plot1_clustered = ggplot(dat_all_clustered, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_clustered$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_clustered$absError)), 0.01))) +
ylab("True absolute error / RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_clustered, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_clustered,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ true abs. error (clustered)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_clustered = ggplot(dat_all_clustered, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_clustered$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_clustered$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_clustered, aes(LPD, meanPredSd, color="Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (clustered)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# biased with outlier
dat_all_biasedWithOutlier <- data.frame(absError = values(truediff_biasedWithOutlier, na.rm=T), type = rep("LPD",length(values(AOA_biasedWithOutlier$LPD, na.rm = T))),
LPD = values(AOA_biasedWithOutlier$LPD, na.rm = T), DI = values(AOA_biasedWithOutlier$DI, na.rm = T), predsd = values(predsd_biasedWithOutlier, na.rm = T))
th_biasedWithOutlier <- cv_results$RMSE[3]
plot1_biasedWithOutlier = ggplot(dat_all_biasedWithOutlier, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_biasedWithOutlier$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_biasedWithOutlier$absError)), 0.01))) +
ylab("True absolute error / RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_biasedWithOutlier, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_biasedWithOutlier,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ true abs. error (biased with outlier)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_biasedWithOutlier =  ggplot(dat_all_biasedWithOutlier, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_biasedWithOutlier$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_biasedWithOutlier$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_biasedWithOutlier, aes(LPD, meanPredSd, color = "Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (biased with outlier)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# generate pdf plot for LPD ~ True abs. error
pdf(file = "code/figures/simulation_study/LPD_true_error.pdf", width = 14, height = 6)
plot_grid(plot1_random,
plot1_clustered,
plot1_biasedWithOutlier,
ncol=3,
labels = c("(a)", "(b)", "(c)"))
invisible(dev.off())
# generate pdf plot for LPD ~ True abs. error
pdf(file = "code/figures/simulation_study/LPD_true_error.pdf", width = 10, height = 4)
plot_grid(plot1_random,
plot1_clustered,
plot1_biasedWithOutlier,
ncol=3,
labels = c("(a)", "(b)", "(c)"))
invisible(dev.off())
plot1_random = ggplot(dat_all_random, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_random$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_random$absError)), 0.01))) +
ylab("RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_random, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_random,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ RMSE (random)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_random = ggplot(dat_all_random, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_random$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_random$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_random, aes(LPD, meanPredSd, color = "Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (random)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# clustered
dat_all_clustered <- data.frame(absError = values(truediff_clustered, na.rm=T), type = rep("LPD",length(values(AOA_clustered$LPD, na.rm = T))),
LPD = values(AOA_clustered$LPD, na.rm = T), DI = values(AOA_clustered$DI, na.rm = T), predsd = values(predsd_clustered, na.rm = T))
th_clustered <- cv_results$RMSE[2]
plot1_clustered = ggplot(dat_all_clustered, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_clustered$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_clustered$absError)), 0.01))) +
ylab("RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_clustered, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_clustered,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ RMSE (clustered)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_clustered = ggplot(dat_all_clustered, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_clustered$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_clustered$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_clustered, aes(LPD, meanPredSd, color="Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (clustered)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# biased with outlier
dat_all_biasedWithOutlier <- data.frame(absError = values(truediff_biasedWithOutlier, na.rm=T), type = rep("LPD",length(values(AOA_biasedWithOutlier$LPD, na.rm = T))),
LPD = values(AOA_biasedWithOutlier$LPD, na.rm = T), DI = values(AOA_biasedWithOutlier$DI, na.rm = T), predsd = values(predsd_biasedWithOutlier, na.rm = T))
th_biasedWithOutlier <- cv_results$RMSE[3]
plot1_biasedWithOutlier = ggplot(dat_all_biasedWithOutlier, aes(x = LPD, y = absError)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_biasedWithOutlier$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_biasedWithOutlier$absError)), 0.01))) +
ylab("RMSE") +
xlab("Local data point density (LPD)") +
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7)) +
geom_point(data = LPD_RMSE_biasedWithOutlier, aes(LPD, RMSE, color = "RMSE"), size = .5) +
scale_color_manual(name = "",values = c("RMSE" = "black")) +
geom_hline(aes(yintercept=th_biasedWithOutlier,linetype="CV RMSE"), color = "red") +
scale_linetype_manual(name = "", values = c("CV RMSE" = "solid")) +
labs(title = "LPD ~ RMSE (biased with outlier)") +
theme_bw() +
theme(legend.title = element_text( size = 10))
plot2_biasedWithOutlier =  ggplot(dat_all_biasedWithOutlier, aes(LPD,sd)) +
stat_bin_2d(breaks=list(x = seq(-0.25,max(dat_all_biasedWithOutlier$LPD)+1,0.5), y = seq(0, ceiling(max(dat_all_biasedWithOutlier$sd)), 0.01)))+
ylab("Prediction SD")+
xlab("Local data point density (LPD)")+
scale_fill_gradientn(name = "Data points",
trans = "log",
breaks = 10^(0:3),
colors=viridis(10, alpha=.7))+
geom_point(data = LPD_predsd_biasedWithOutlier, aes(LPD, meanPredSd, color = "Mean Pred. SD"), size = .5) +
scale_color_manual(name = "",values = c("Mean Pred. SD" = "black")) +
labs(title = "LPD ~ Prediction SD (biased with outlier)") +
theme_bw()+
theme(legend.title = element_text( size = 10))
# generate pdf plot for LPD ~ True abs. error
pdf(file = "code/figures/simulation_study/LPD_true_error.pdf", width = 10, height = 4)
plot_grid(plot1_random,
plot1_clustered,
plot1_biasedWithOutlier,
ncol=3,
labels = c("(a)", "(b)", "(c)"))
invisible(dev.off())
install.packages("renv")
library(renv)
remove(terra)
remove('terra')
purge(terra)
purge('terra')
install.packages("terra")
library(terra)
library(terra)
detach("package:terra", unload = TRUE)
library(terra)
library(terra)
renv::purge(terra)
renv::purge('terra'')
renv::purge('terra')
renv::purge('terra')
library(terra)
detach("package:terra", unload = TRUE)
library(terra)
tempfile()
remove.packages("terra", lib="~/R/x86_64-pc-linux-gnu-library/4.4")
renv::install("github::rspatial/terra")
remotes::install_github(rspatial/terra)
remotes::install_github('rspatial/terra')
library(terra)
detach("package:terra", unload = TRUE)
library(terra)
library(terra)
library(sf)
install.packages(c("datawizard", "DBI", "downlit", "evaluate", "geodata", "hardhat", "highr", "insight", "knitr", "modelbased", "performance", "RcppArmadillo", "rlang", "SparseM", "tidyterra"))
gc()
install.packages(c("CAST", "correlation", "ggsci", "lme4", "nloptr", "parameters", "scam", "xfun"))
install.packages(c("cli", "crayon", "digest", "nloptr", "prodlim", "SparseM", "XML"))
install.packages("pbkrtest")
